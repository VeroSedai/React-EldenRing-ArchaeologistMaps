{"ast":null,"code":"var _jsxFileName = \"/Users/veronicapuddu/Downloads/React-flow-edit-node-youtube-main/src/DragDrop/DnDFlow.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useCallback } from 'react';\nimport ReactFlow, { Edge, ReactFlowProvider, addEdge, useNodesState, useEdgesState, Controls, Background } from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport Sidebar from './sidebar'; // Assicurati che questo sia corretto\nimport './style.css';\nimport CustomNode from '../CustomNodes/CustomNode';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst nodeTypes = {\n  customNode: CustomNode\n};\nlet id = 0;\nconst getId = () => `dndnode_${id++}`;\nconst DnDFlow = () => {\n  _s();\n  const reactFlowWrapper = useRef(null);\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  const [reactFlowInstance, setReactFlowInstance] = useState(null);\n  const [variant, setVariant] = useState('Lines');\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\n  const onNodeClick = node => {\n    // Passa i dati del nodo alla Sidebar\n    const updatedNodeData = {\n      name: node.label,\n      image: node.image,\n      description: node.description,\n      notes: node.notes,\n      type: node.nodeType\n    };\n\n    // Chiama la funzione per aggiornare i dati nella Sidebar\n    handleUpdateNode(updatedNodeData);\n  };\n  const handleUpdateNode = updatedNodeData => {\n    const updatedNodes = nodes.map(node => {\n      if (node.data.label === updatedNodeData.label) {\n        return {\n          ...node,\n          data: {\n            ...node.data,\n            ...updatedNodeData\n          }\n        };\n      }\n      return node;\n    });\n    setNodes(updatedNodes);\n  };\n  const onConnect = useCallback(params => setEdges(eds => addEdge(params, eds)), []);\n  const onDragOver = useCallback(event => {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'move';\n  }, []);\n  const onDrop = useCallback(event => {\n    event.preventDefault();\n    const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\n    const nodeData = JSON.parse(event.dataTransfer.getData('application/reactflow'));\n    if (!nodeData) {\n      return;\n    }\n    const position = reactFlowInstance.project({\n      x: event.clientX - reactFlowBounds.left,\n      y: event.clientY - reactFlowBounds.top\n    });\n    const newNode = {\n      id: getId(),\n      type: 'customNode',\n      position,\n      data: {\n        label: nodeData.name || `${nodeData.type} node`,\n        image: nodeData.image,\n        notes: nodeData.notes,\n        description: nodeData.description,\n        nodeType: nodeData.type,\n        onNodeClick // Passa qui la funzione\n      }\n    };\n    setNodes(nds => nds.concat(newNode));\n  }, [reactFlowInstance]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dndflow\",\n    children: /*#__PURE__*/_jsxDEV(ReactFlowProvider, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reactflow-wrapper\",\n        ref: reactFlowWrapper,\n        children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n          nodes: nodes,\n          edges: edges,\n          onNodeClick: onNodeClick,\n          onNodesChange: onNodesChange,\n          onEdgesChange: onEdgesChange,\n          onConnect: onConnect,\n          onInit: setReactFlowInstance,\n          onDrop: onDrop,\n          onDragOver: onDragOver,\n          fitView: true,\n          nodeTypes: nodeTypes,\n          children: [/*#__PURE__*/_jsxDEV(Background, {\n            color: \"#99b3ec\",\n            variant: variant\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Sidebar, {\n        onUpdateNode: handleUpdateNode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n};\n_s(DnDFlow, \"CBtR7FifY+aTo57MJ2fDCGwgQQA=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = DnDFlow;\nexport default DnDFlow;\nvar _c;\n$RefreshReg$(_c, \"DnDFlow\");","map":{"version":3,"names":["React","useState","useRef","useCallback","ReactFlow","Edge","ReactFlowProvider","addEdge","useNodesState","useEdgesState","Controls","Background","Sidebar","CustomNode","jsxDEV","_jsxDEV","nodeTypes","customNode","id","getId","DnDFlow","_s","reactFlowWrapper","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","reactFlowInstance","setReactFlowInstance","variant","setVariant","selectedNodeId","setSelectedNodeId","onNodeClick","node","updatedNodeData","name","label","image","description","notes","type","nodeType","handleUpdateNode","updatedNodes","map","data","onConnect","params","eds","onDragOver","event","preventDefault","dataTransfer","dropEffect","onDrop","reactFlowBounds","current","getBoundingClientRect","nodeData","JSON","parse","getData","position","project","x","clientX","left","y","clientY","top","newNode","nds","concat","className","children","ref","onInit","fitView","color","fileName","_jsxFileName","lineNumber","columnNumber","onUpdateNode","_c","$RefreshReg$"],"sources":["/Users/veronicapuddu/Downloads/React-flow-edit-node-youtube-main/src/DragDrop/DnDFlow.js"],"sourcesContent":["import React, { useState, useRef, useCallback } from 'react';\r\nimport ReactFlow, {\r\n  Edge,\r\n  ReactFlowProvider,\r\n  addEdge,\r\n  useNodesState,\r\n  useEdgesState,\r\n  Controls,\r\n  Background\r\n} from 'reactflow';\r\nimport 'reactflow/dist/style.css';\r\nimport Sidebar from './sidebar'; // Assicurati che questo sia corretto\r\nimport './style.css';\r\nimport CustomNode from '../CustomNodes/CustomNode';\r\n\r\nconst nodeTypes = {\r\n  customNode: CustomNode,\r\n};\r\n\r\nlet id = 0;\r\nconst getId = () => `dndnode_${id++}`;\r\n\r\nconst DnDFlow = () => {\r\n  const reactFlowWrapper = useRef(null);\r\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\r\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\r\n  const [reactFlowInstance, setReactFlowInstance] = useState(null);\r\n  const [variant, setVariant] = useState('Lines');\r\n  const [selectedNodeId, setSelectedNodeId] = useState(null);\r\n\r\n  const onNodeClick = (node) => {\r\n    // Passa i dati del nodo alla Sidebar\r\n    const updatedNodeData = {\r\n      name: node.label,\r\n      image: node.image,\r\n      description: node.description,\r\n      notes: node.notes,\r\n      type: node.nodeType,\r\n    };\r\n    \r\n    // Chiama la funzione per aggiornare i dati nella Sidebar\r\n    handleUpdateNode(updatedNodeData);\r\n  };\r\n\r\n  const handleUpdateNode = (updatedNodeData) => {\r\n    const updatedNodes = nodes.map(node => {\r\n      if (node.data.label === updatedNodeData.label) {\r\n        return {\r\n          ...node,\r\n          data: {\r\n            ...node.data,\r\n            ...updatedNodeData,\r\n          },\r\n        };\r\n      }\r\n      return node;\r\n    });\r\n    setNodes(updatedNodes);\r\n  };\r\n\r\n  const onConnect = useCallback((params) => setEdges((eds) => addEdge(params, eds)), []);\r\n\r\n  const onDragOver = useCallback((event) => {\r\n    event.preventDefault();\r\n    event.dataTransfer.dropEffect = 'move';\r\n  }, []);\r\n\r\n  const onDrop = useCallback(\r\n    (event) => {\r\n      event.preventDefault();\r\n\r\n      const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\r\n      const nodeData = JSON.parse(event.dataTransfer.getData('application/reactflow'));\r\n\r\n      if (!nodeData) {\r\n        return;\r\n      }\r\n\r\n      const position = reactFlowInstance.project({\r\n        x: event.clientX - reactFlowBounds.left,\r\n        y: event.clientY - reactFlowBounds.top,\r\n      });\r\n\r\n      const newNode = {\r\n        id: getId(),\r\n        type: 'customNode',\r\n        position,\r\n        data: {\r\n          label: nodeData.name || `${nodeData.type} node`,\r\n          image: nodeData.image,\r\n          notes: nodeData.notes,\r\n          description: nodeData.description,\r\n          nodeType: nodeData.type,\r\n          onNodeClick, // Passa qui la funzione\r\n        },\r\n      };\r\n\r\n      setNodes((nds) => nds.concat(newNode));\r\n    },\r\n    [reactFlowInstance]\r\n  );\r\n\r\n  return (\r\n    <div className=\"dndflow\">\r\n      <ReactFlowProvider>\r\n        <div className=\"reactflow-wrapper\" ref={reactFlowWrapper}>\r\n          <ReactFlow\r\n            nodes={nodes}\r\n            edges={edges}\r\n            onNodeClick={onNodeClick}\r\n            onNodesChange={onNodesChange}\r\n            onEdgesChange={onEdgesChange}\r\n            onConnect={onConnect}\r\n            onInit={setReactFlowInstance}\r\n            onDrop={onDrop}\r\n            onDragOver={onDragOver}\r\n            fitView\r\n            nodeTypes={nodeTypes}\r\n          >\r\n            <Background color=\"#99b3ec\" variant={variant} />\r\n            <Controls />\r\n          </ReactFlow>\r\n        </div>\r\n        <Sidebar onUpdateNode={handleUpdateNode} />\r\n      </ReactFlowProvider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DnDFlow;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}