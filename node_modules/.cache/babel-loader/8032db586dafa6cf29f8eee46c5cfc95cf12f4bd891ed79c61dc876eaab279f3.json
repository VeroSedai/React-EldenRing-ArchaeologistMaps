{"ast":null,"code":"var _jsxFileName = \"/Users/veronicapuddu/Downloads/React-flow-edit-node-youtube-main/src/DragDrop/sidebar.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { GraphQLClient, gql } from 'graphql-request';\nimport Autocomplete from 'react-autocomplete';\nimport './style.css'; // Importa il file CSS\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst client = new GraphQLClient('https://eldenring.fanapis.com/api/graphql');\n\n// Definisci le query per ottenere tutti i nomi e i dettagli\nconst QUERIES = {\n  weapon: {\n    allNames: gql`\n      query {\n        weapon(limit: -1) {\n          name\n        }\n      }\n    `,\n    details: gql`\n      query SearchItems($name: String!) {\n        weapon(name: $name) {\n          id\n          name\n          image\n          description\n        }\n      }\n    `\n  },\n  shield: {\n    allNames: gql`\n      query {\n        shield(limit: -1) {\n          name\n        }\n      }\n    `,\n    details: gql`\n      query SearchItems($name: String!) {\n        shield(name: $name) {\n          id\n          name\n          image\n          description\n        }\n      }\n    `\n  },\n  npc: {\n    allNames: gql`\n      query {\n        npc(limit: -1) {\n          name\n        }\n      }\n    `,\n    details: gql`\n      query SearchItems($name: String!) {\n        npc(name: $name) {\n          id\n          name\n          image\n          description\n        }\n      }\n    `\n  },\n  armor: {\n    allNames: gql`\n      query {\n        armor(limit: -1) {\n          name\n        }\n      }\n    `,\n    details: gql`\n      query SearchItems($name: String!) {\n        armor(name: $name) {\n          id\n          name\n          image\n          description\n        }\n      }\n    `\n  },\n  boss: {\n    allNames: gql`\n      query {\n        boss(limit: -1) {\n          name\n        }\n      }\n    `,\n    details: gql`\n      query SearchItems($name: String!) {\n        boss(name: $name) {\n          id\n          name\n          image\n          description\n        }\n      }\n    `\n  }\n};\nconst Sidebar = ({\n  onUpdateNode\n}) => {\n  _s();\n  const [searchValue, setSearchValue] = useState('');\n  const [suggestions, setSuggestions] = useState([]);\n  const [selectedItem, setSelectedItem] = useState(null);\n  const [itemType, setItemType] = useState(''); // Default type\n  const [nodeType, setNodeType] = useState('default'); // Default come tipo iniziale\n  const [nodeName, setNodeName] = useState('');\n  const [nodeImage, setNodeImage] = useState('');\n  const [nodeDescription, setNodeDescription] = useState('');\n  const [nodeNotes, setNodeNotes] = useState('');\n  const onDragStart = event => {\n    const nodeData = {\n      type: nodeType,\n      // Imposta il tipo\n      name: nodeName,\n      image: nodeImage,\n      description: nodeDescription,\n      notes: nodeNotes\n    };\n    event.dataTransfer.setData('application/reactflow', JSON.stringify(nodeData));\n    event.dataTransfer.effectAllowed = 'move';\n  };\n\n  // Funzione per cercare i nomi tramite GraphQL, cambia la query in base al tipo selezionato\n  const fetchNames = async type => {\n    try {\n      const response = await client.request(QUERIES[type].allNames);\n      const results = response[`${type}`]; // Access the correct data array (e.g., weapons, shields, npcs)\n\n      // Estrai solo i nomi e rimuovi i duplicati usando un Set\n      const uniqueNames = [...new Set(results.map(item => item.name))];\n      setSuggestions(uniqueNames); // Aggiorna i suggerimenti con nomi unici\n    } catch (error) {\n      console.error('Errore nel recupero dei dati:', error);\n    }\n  };\n\n  // Funzione per gestire il cambio di tipo di oggetto\n  const handleTypeChange = async e => {\n    const selectedType = e.target.value;\n    setItemType(selectedType);\n    setSearchValue(''); // Resetta il valore di ricerca\n    setSuggestions([]); // Resetta i suggerimenti\n    setSelectedItem(null); // Resetta l'elemento selezionato\n\n    // Esegui la query per ottenere i nomi degli oggetti\n    await fetchNames(selectedType);\n  };\n  const handleUpdate = () => {\n    // Crea un oggetto nodo con i dati aggiornati\n    const updatedNodeData = {\n      name: nodeName,\n      image: nodeImage,\n      description: nodeDescription,\n      notes: nodeNotes,\n      type: nodeType\n    };\n    onUpdateNode(updatedNodeData); // Chiama la funzione di aggiornamento passata come props\n  };\n\n  // Funzione per aggiornare i suggerimenti durante la digitazione\n  const handleInputChange = e => {\n    const value = e.target.value;\n    setSearchValue(value);\n    if (value.length > 2) {\n      // Esegui il filtraggio solo se il valore ha più di 2 caratteri\n      const filteredSuggestions = suggestions.filter(item => item.toLowerCase().includes(value.toLowerCase()) // Confronta in modo case-insensitive\n      );\n      setSuggestions(filteredSuggestions); // Aggiorna i suggerimenti filtrati\n    } else {\n      // Se la lunghezza è 2 o meno, resettare i suggerimenti\n      fetchNames(itemType); // Riporta i suggerimenti per il tipo selezionato\n    }\n  };\n\n  // Funzione per gestire la selezione di un oggetto\n  const handleSelect = async val => {\n    setSearchValue(val);\n\n    // Fetch complete details for the selected item\n    const response = await client.request(QUERIES[itemType].details, {\n      name: val\n    });\n    const result = response[itemType][0]; // Prendi il primo risultato che corrisponde al nome\n    if (result) {\n      setNodeName(result.name);\n      setNodeImage(result.image);\n      setNodeDescription(result.description);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"aside\", {\n    className: \"sidebar\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dropdown\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Item Type:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: itemType,\n        onChange: handleTypeChange,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"weapon\",\n          children: \"Weapon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"shield\",\n          children: \"Shield\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"npc\",\n          children: \"NPC\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"armor\",\n          children: \"Armor\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"boss\",\n          children: \"Boss\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"autocomplete\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Search Item:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Autocomplete, {\n        getItemValue: item => item,\n        items: suggestions,\n        renderItem: (item, isHighlighted) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `autocomplete-item ${isHighlighted ? \"highlighted\" : \"\"}` // Applica classi per lo stile\n          ,\n          children: item\n        }, item, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 13\n        }, this),\n        value: searchValue,\n        onChange: handleInputChange,\n        onSelect: handleSelect,\n        inputProps: {\n          className: \"autocomplete-input\" // Applica la classe per l'input\n        },\n        wrapperStyle: {\n          position: \"relative\"\n        } // Imposta lo stile del wrapper\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Node Name\",\n        value: nodeName,\n        onChange: e => setNodeName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Image URL\",\n        value: nodeImage,\n        onChange: e => setNodeImage(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Description\",\n        value: nodeDescription,\n        onChange: e => setNodeDescription(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Notes\",\n        value: nodeNotes,\n        onChange: e => setNodeNotes(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleUpdate,\n        className: \"btn-update\",\n        children: \"Update Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"description\",\n        children: \"You can drag these nodes to the pane on the right.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dropdown\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Node Type:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"dropdown\",\n          onChange: e => setNodeType(e.target.value),\n          value: nodeType,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"input\",\n            children: \"Input Node\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"default\",\n            children: \"Default Node\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"output\",\n            children: \"Output Node\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dndnode\",\n        onDragStart: onDragStart,\n        draggable: true,\n        style: {\n          padding: \"10px\",\n          border: \"1px solid #ccc\",\n          margin: \"5px\",\n          cursor: \"grab\"\n        },\n        children: \"Custom Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 200,\n    columnNumber: 5\n  }, this);\n};\n_s(Sidebar, \"JoGR3RTBeMsIraE/MEO82U22UDY=\");\n_c = Sidebar;\nexport default Sidebar;\nvar _c;\n$RefreshReg$(_c, \"Sidebar\");","map":{"version":3,"names":["React","useState","GraphQLClient","gql","Autocomplete","jsxDEV","_jsxDEV","client","QUERIES","weapon","allNames","details","shield","npc","armor","boss","Sidebar","onUpdateNode","_s","searchValue","setSearchValue","suggestions","setSuggestions","selectedItem","setSelectedItem","itemType","setItemType","nodeType","setNodeType","nodeName","setNodeName","nodeImage","setNodeImage","nodeDescription","setNodeDescription","nodeNotes","setNodeNotes","onDragStart","event","nodeData","type","name","image","description","notes","dataTransfer","setData","JSON","stringify","effectAllowed","fetchNames","response","request","results","uniqueNames","Set","map","item","error","console","handleTypeChange","e","selectedType","target","value","handleUpdate","updatedNodeData","handleInputChange","length","filteredSuggestions","filter","toLowerCase","includes","handleSelect","val","result","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","getItemValue","items","renderItem","isHighlighted","onSelect","inputProps","wrapperStyle","position","placeholder","onClick","draggable","style","padding","border","margin","cursor","_c","$RefreshReg$"],"sources":["/Users/veronicapuddu/Downloads/React-flow-edit-node-youtube-main/src/DragDrop/sidebar.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { GraphQLClient, gql } from 'graphql-request';\r\nimport Autocomplete from 'react-autocomplete';\r\nimport './style.css'; // Importa il file CSS\r\n\r\nconst client = new GraphQLClient('https://eldenring.fanapis.com/api/graphql');\r\n\r\n// Definisci le query per ottenere tutti i nomi e i dettagli\r\nconst QUERIES = {\r\n  weapon: {\r\n    allNames: gql`\r\n      query {\r\n        weapon(limit: -1) {\r\n          name\r\n        }\r\n      }\r\n    `,\r\n    details: gql`\r\n      query SearchItems($name: String!) {\r\n        weapon(name: $name) {\r\n          id\r\n          name\r\n          image\r\n          description\r\n        }\r\n      }\r\n    `,\r\n  },\r\n  shield: {\r\n    allNames: gql`\r\n      query {\r\n        shield(limit: -1) {\r\n          name\r\n        }\r\n      }\r\n    `,\r\n    details: gql`\r\n      query SearchItems($name: String!) {\r\n        shield(name: $name) {\r\n          id\r\n          name\r\n          image\r\n          description\r\n        }\r\n      }\r\n    `,\r\n  },\r\n  npc: {\r\n    allNames: gql`\r\n      query {\r\n        npc(limit: -1) {\r\n          name\r\n        }\r\n      }\r\n    `,\r\n    details: gql`\r\n      query SearchItems($name: String!) {\r\n        npc(name: $name) {\r\n          id\r\n          name\r\n          image\r\n          description\r\n        }\r\n      }\r\n    `,\r\n  },\r\n  armor: {\r\n    allNames: gql`\r\n      query {\r\n        armor(limit: -1) {\r\n          name\r\n        }\r\n      }\r\n    `,\r\n    details: gql`\r\n      query SearchItems($name: String!) {\r\n        armor(name: $name) {\r\n          id\r\n          name\r\n          image\r\n          description\r\n        }\r\n      }\r\n    `,\r\n  },\r\n  boss: {\r\n    allNames: gql`\r\n      query {\r\n        boss(limit: -1) {\r\n          name\r\n        }\r\n      }\r\n    `,\r\n    details: gql`\r\n      query SearchItems($name: String!) {\r\n        boss(name: $name) {\r\n          id\r\n          name\r\n          image\r\n          description\r\n        }\r\n      }\r\n    `,\r\n  },\r\n};\r\n\r\nconst Sidebar = ({ onUpdateNode }) => {\r\n  const [searchValue, setSearchValue] = useState('');\r\n  const [suggestions, setSuggestions] = useState([]);\r\n  const [selectedItem, setSelectedItem] = useState(null);\r\n  const [itemType, setItemType] = useState(''); // Default type\r\n  const [nodeType, setNodeType] = useState('default'); // Default come tipo iniziale\r\n  const [nodeName, setNodeName] = useState('');\r\n  const [nodeImage, setNodeImage] = useState('');\r\n  const [nodeDescription, setNodeDescription] = useState('');\r\n  const [nodeNotes, setNodeNotes] = useState('');\r\n\r\n  const onDragStart = (event) => {\r\n    const nodeData = {\r\n      type: nodeType, // Imposta il tipo\r\n      name: nodeName,\r\n      image: nodeImage,\r\n      description: nodeDescription,\r\n      notes: nodeNotes,\r\n    };\r\n    event.dataTransfer.setData('application/reactflow', JSON.stringify(nodeData));\r\n    event.dataTransfer.effectAllowed = 'move';\r\n  };\r\n\r\n  // Funzione per cercare i nomi tramite GraphQL, cambia la query in base al tipo selezionato\r\n  const fetchNames = async (type) => {\r\n    try {\r\n      const response = await client.request(QUERIES[type].allNames);\r\n      const results = response[`${type}`]; // Access the correct data array (e.g., weapons, shields, npcs)\r\n      \r\n      // Estrai solo i nomi e rimuovi i duplicati usando un Set\r\n      const uniqueNames = [...new Set(results.map(item => item.name))];\r\n      setSuggestions(uniqueNames); // Aggiorna i suggerimenti con nomi unici\r\n    } catch (error) {\r\n      console.error('Errore nel recupero dei dati:', error);\r\n    }\r\n  };\r\n  \r\n\r\n  // Funzione per gestire il cambio di tipo di oggetto\r\n  const handleTypeChange = async (e) => {\r\n    const selectedType = e.target.value;\r\n    setItemType(selectedType);\r\n    setSearchValue(''); // Resetta il valore di ricerca\r\n    setSuggestions([]); // Resetta i suggerimenti\r\n    setSelectedItem(null); // Resetta l'elemento selezionato\r\n\r\n    // Esegui la query per ottenere i nomi degli oggetti\r\n    await fetchNames(selectedType);\r\n  };\r\n\r\n  const handleUpdate = () => {\r\n    // Crea un oggetto nodo con i dati aggiornati\r\n    const updatedNodeData = {\r\n      name: nodeName,\r\n      image: nodeImage,\r\n      description: nodeDescription,\r\n      notes: nodeNotes,\r\n      type: nodeType,\r\n    };\r\n    onUpdateNode(updatedNodeData); // Chiama la funzione di aggiornamento passata come props\r\n  };\r\n\r\n  // Funzione per aggiornare i suggerimenti durante la digitazione\r\n  const handleInputChange = (e) => {\r\n    const value = e.target.value;\r\n    setSearchValue(value);\r\n\r\n    if (value.length > 2) { // Esegui il filtraggio solo se il valore ha più di 2 caratteri\r\n      const filteredSuggestions = suggestions.filter((item) =>\r\n        item.toLowerCase().includes(value.toLowerCase()) // Confronta in modo case-insensitive\r\n      );\r\n      setSuggestions(filteredSuggestions); // Aggiorna i suggerimenti filtrati\r\n    } else {\r\n      // Se la lunghezza è 2 o meno, resettare i suggerimenti\r\n      fetchNames(itemType); // Riporta i suggerimenti per il tipo selezionato\r\n    }\r\n  };\r\n\r\n  // Funzione per gestire la selezione di un oggetto\r\n  const handleSelect = async (val) => {\r\n    setSearchValue(val);\r\n    \r\n    // Fetch complete details for the selected item\r\n    const response = await client.request(QUERIES[itemType].details, { name: val });\r\n    const result = response[itemType][0]; // Prendi il primo risultato che corrisponde al nome\r\n    if (result) {\r\n      setNodeName(result.name);\r\n      setNodeImage(result.image);\r\n      setNodeDescription(result.description);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <aside className=\"sidebar\">\r\n      {/* Dropdown per selezionare il tipo di oggetto */}\r\n      <div className=\"dropdown\">\r\n        <label>Item Type:</label>\r\n        <select value={itemType} onChange={handleTypeChange}>\r\n          <option value=\"\"></option>\r\n          <option value=\"weapon\">Weapon</option>\r\n          <option value=\"shield\">Shield</option>\r\n          <option value=\"npc\">NPC</option>\r\n          <option value=\"armor\">Armor</option>\r\n          <option value=\"boss\">Boss</option>\r\n          {/* Aggiungi altre opzioni per gli altri tipi */}\r\n        </select>\r\n      </div>\r\n\r\n      {/* Campo di autocompletamento */}\r\n      <div className=\"autocomplete\">\r\n        <label>Search Item:</label>\r\n        <Autocomplete\r\n          getItemValue={(item) => item}\r\n          items={suggestions}\r\n          renderItem={(item, isHighlighted) => (\r\n            <div\r\n              key={item}\r\n              className={`autocomplete-item ${\r\n                isHighlighted ? \"highlighted\" : \"\"\r\n              }`} // Applica classi per lo stile\r\n            >\r\n              {item}\r\n            </div>\r\n          )}\r\n          value={searchValue}\r\n          onChange={handleInputChange}\r\n          onSelect={handleSelect}\r\n          inputProps={{\r\n            className: \"autocomplete-input\", // Applica la classe per l'input\r\n          }}\r\n          wrapperStyle={{ position: \"relative\" }} // Imposta lo stile del wrapper\r\n        />\r\n      </div>\r\n      <div>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Node Name\"\r\n          value={nodeName}\r\n          onChange={(e) => setNodeName(e.target.value)}\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Image URL\"\r\n          value={nodeImage}\r\n          onChange={(e) => setNodeImage(e.target.value)}\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Description\"\r\n          value={nodeDescription}\r\n          onChange={(e) => setNodeDescription(e.target.value)}\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Notes\"\r\n          value={nodeNotes}\r\n          onChange={(e) => setNodeNotes(e.target.value)}\r\n        />\r\n\r\n        <button onClick={handleUpdate} className=\"btn-update\">Update Node</button>\r\n\r\n        <div className=\"description\">\r\n          You can drag these nodes to the pane on the right.\r\n        </div>\r\n\r\n        <div className=\"dropdown\">\r\n          <label>Node Type:</label>\r\n          <select\r\n            className=\"dropdown\"\r\n            onChange={(e) => setNodeType(e.target.value)}\r\n            value={nodeType}\r\n          >\r\n            <option value=\"input\">Input Node</option>\r\n            <option value=\"default\">Default Node</option>\r\n            <option value=\"output\">Output Node</option>\r\n            {/* Aggiungi altre opzioni per gli altri tipi */}\r\n          </select>\r\n        </div>\r\n        <div\r\n          className=\"dndnode\"\r\n          onDragStart={onDragStart}\r\n          draggable\r\n          style={{\r\n            padding: \"10px\",\r\n            border: \"1px solid #ccc\",\r\n            margin: \"5px\",\r\n            cursor: \"grab\",\r\n          }}\r\n        >\r\n          Custom Node\r\n        </div>\r\n      </div>\r\n    </aside>\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}